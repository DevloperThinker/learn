ReentrantLock 源码解读

继承了AQS，实现了tryAcquire、tryRelease

public class ReentrantLock implements Lock, java.io.Serializable


一、内部类
1、定义了一个sync的内部类，继承了AQS，实现了tryRelease、isHeldExclusively方法
 /**
 * Base of synchronization control for this lock. Subclassed
 * into fair and nonfair versions below. Uses AQS state to
 * represent the number of holds on the lock.
 */
abstract static class Sync extends AbstractQueuedSynchronizer {
    private static final long serialVersionUID = -5179523762034025860L;

    /**
     * Performs {@link Lock#lock}. The main reason for subclassing
     * is to allow fast path for nonfair version.
     */
    abstract void lock();

    /**
     * Performs non-fair tryLock.  tryAcquire is implemented in
     * subclasses, but both need nonfair try for trylock method.
     */
    final boolean nonfairTryAcquire(int acquires) {
        final Thread current = Thread.currentThread();
        int c = getState();
        if (c == 0) {
            if (compareAndSetState(0, acquires)) {
                setExclusiveOwnerThread(current);
                return true;
            }
        }
        else if (current == getExclusiveOwnerThread()) {
            int nextc = c + acquires;
            if (nextc < 0) // overflow
                throw new Error("Maximum lock count exceeded");
            setState(nextc);
            return true;
        }
        return false;
    }

    protected final boolean tryRelease(int releases) {
        int c = getState() - releases;
        if (Thread.currentThread() != getExclusiveOwnerThread())
            throw new IllegalMonitorStateException();
        boolean free = false;
        if (c == 0) {
            free = true;
            setExclusiveOwnerThread(null);
        }
        setState(c);
        return free;
    }

    protected final boolean isHeldExclusively() {
        // While we must in general read state before owner,
        // we don't need to do so to check if current thread is owner
        return getExclusiveOwnerThread() == Thread.currentThread();
    }

    final ConditionObject newCondition() {
        return new ConditionObject();
    }

    // Methods relayed from outer class

    final Thread getOwner() {
        return getState() == 0 ? null : getExclusiveOwnerThread();
    }

    final int getHoldCount() {
        return isHeldExclusively() ? getState() : 0;
    }

    final boolean isLocked() {
        return getState() != 0;
    }

    /**
     * Reconstitutes the instance from a stream (that is, deserializes it).
     */
    private void readObject(java.io.ObjectInputStream s)
        throws java.io.IOException, ClassNotFoundException {
        s.defaultReadObject();
        setState(0); // reset to unlocked state
    }
}

2、非公平锁（默认）
/**
 * Sync object for non-fair locks
 */
static final class NonfairSync extends Sync {
    private static final long serialVersionUID = 7316153563782823691L;

    /**
     * Performs lock.  Try immediate barge, backing up to normal
     * acquire on failure.
     */
    final void lock() {
        if (compareAndSetState(0, 1))
            setExclusiveOwnerThread(Thread.currentThread());
        else
            acquire(1);
    }

    protected final boolean tryAcquire(int acquires) {
        return nonfairTryAcquire(acquires);
    }
}


3、公平锁，实现了父类的tryAcquire方法
/**
 * Sync object for fair locks
 */
static final class FairSync extends Sync {
    private static final long serialVersionUID = -3000897897090466540L;

    final void lock() {
        acquire(1);
    }

    /**
     * Fair version of tryAcquire.  Don't grant access unless
     * recursive call or no waiters or is first.
     */
    protected final boolean tryAcquire(int acquires) {
        final Thread current = Thread.currentThread();
        int c = getState();
        if (c == 0) {
            if (!hasQueuedPredecessors() &&
                compareAndSetState(0, acquires)) {
                setExclusiveOwnerThread(current);
                return true;
            }
        }
        else if (current == getExclusiveOwnerThread()) {
            int nextc = c + acquires;
            if (nextc < 0)
                throw new Error("Maximum lock count exceeded");
            setState(nextc);
            return true;
        }
        return false;
    }
}


二、构造方法

1、ReentrantLock默认是非公平锁，实例化NonFairSync对象
/**
 * Creates an instance of {@code ReentrantLock}.
 * This is equivalent to using {@code ReentrantLock(false)}.
 */
public ReentrantLock() {
    sync = new NonfairSync();
}

2、根据传入的fair，实例化NonFairSync或FairSync对象
/**
 * Creates an instance of {@code ReentrantLock} with the
 * given fairness policy.
 *
 * @param fair {@code true} if this lock should use a fair ordering policy
 */
public ReentrantLock(boolean fair) {
    sync = fair ? new FairSync() : new NonfairSync();
}

三、重要方法
1、非公平锁的lock方法，使用cas将state计数器由0修改为1，若成功，则设置当期线程为独占锁
/**
 * Performs lock.  Try immediate barge, backing up to normal
 * acquire on failure.
 */
final void lock() {
    if (compareAndSetState(0, 1))
        setExclusiveOwnerThread(Thread.currentThread());
    else
        acquire(1);
}

/**
 * Acquires in exclusive mode, ignoring interrupts.  Implemented
 * by invoking at least once {@link #tryAcquire},
 * returning on success.  Otherwise the thread is queued, possibly
 * repeatedly blocking and unblocking, invoking {@link
 * #tryAcquire} until success.  This method can be used
 * to implement method {@link Lock#lock}.
 *
 * @param arg the acquire argument.  This value is conveyed to
 *        {@link #tryAcquire} but is otherwise uninterpreted and
 *        can represent anything you like.
 */
public final void acquire(int arg) {
    //尝试获取锁
    if (!tryAcquire(arg) &&
      //addWaiter 将该线程加入等待队列的尾部，并标记为独占模式
      //acqireQueued() 使线程阻塞在等待队列中获取资源，一直获取到资源后才返回。
      //如果在整个等待过程中被中断，则返回TRUE，否则返回false。
        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
        selfInterrupt();
}

protected final boolean tryAcquire(int acquires) {
    return nonfairTryAcquire(acquires);
}

/**
 * Performs non-fair tryLock.  tryAcquire is implemented in
 * subclasses, but both need nonfair try for trylock method.
 */
final boolean nonfairTryAcquire(int acquires) {
    //获取当前线程
    final Thread current = Thread.currentThread();
    //获取lock对象的上锁状态，若没有上锁，则state=0,否则state=1,state > 1表示重入
    int c = getState();
    //锁未占用
    if (c == 0) {
        //使用cas，进行上锁，若成功，则设置为当前线程为拥有锁的线程
        if (compareAndSetState(0, acquires)) {
            setExclusiveOwnerThread(current);
            return true;
        }
    }
    //如果c不等于0，而且当前线程不等于拥有锁的线程则不会进入，直接返回false
    //如果c不等于0，但是当前线程等于拥有锁的线程则表示这是一次重入，那么将state+1
    else if (current == getExclusiveOwnerThread()) {
        int nextc = c + acquires;
        if (nextc < 0) // overflow
            throw new Error("Maximum lock count exceeded");
        setState(nextc);
        return true;
    }
    return false;
}


2、公平锁的lock方法
final void lock() {
    acquire(1);
}

/**
 * Acquires in exclusive mode, ignoring interrupts.  Implemented
 * by invoking at least once {@link #tryAcquire},
 * returning on success.  Otherwise the thread is queued, possibly
 * repeatedly blocking and unblocking, invoking {@link
 * #tryAcquire} until success.  This method can be used
 * to implement method {@link Lock#lock}.
 *
 * @param arg the acquire argument.  This value is conveyed to
 *        {@link #tryAcquire} but is otherwise uninterpreted and
 *        can represent anything you like.
 */
public final void acquire(int arg) {
    if (!tryAcquire(arg) &&
        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
        selfInterrupt();
}

/**
 * Fair version of tryAcquire.  Don't grant access unless
 * recursive call or no waiters or is first.
 */
protected final boolean tryAcquire(int acquires) {
    //获取当前线程
    final Thread current = Thread.currentThread();
   //获取lock对象的上锁状态，若没有上锁，则state=0,否则state=1,state > 1表示重入
    int c = getState();
   //锁未占用
    if (c == 0) {
        //判断是否需要排队
        //使用cas，进行上锁，若成功，则设置为当前线程为拥有锁的线程
        if (!hasQueuedPredecessors() &&
            compareAndSetState(0, acquires)) {
            setExclusiveOwnerThread(current);
            return true;
        }
    }
    //如果c不等于0，而且当前线程不等于拥有锁的线程则不会进入，直接返回false
    //如果c不等于0，但是当前线程等于拥有锁的线程则表示这是一次重入，那么将state+1
    else if (current == getExclusiveOwnerThread()) {
        int nextc = c + acquires;
        if (nextc < 0)
            throw new Error("Maximum lock count exceeded");
        setState(nextc);
        return true;
    }
    return false;
}
}

//三种情况：
//1、队列没有初始化没人排队，那么我直接不排队，直接上锁
//2、如果队列被初始化了，而且至少有一个人在排队那么自己也去排队；但是有个插曲；
//他会去看看那个第一个排队的人是不是自己，如果是自己那么他就去尝试加锁；尝试看看锁有没有释放
//3、如果队列当中只有一个节点，这个节点就是当前持有锁的那个节点，故而我不需要排队，进行cas；尝试加锁
public final boolean hasQueuedPredecessors() {
    // The correctness of this depends on head being initialized
    // before tail and on head.next being accurate if the current
    // thread is first in queue.
    Node t = tail; // Read fields in reverse initialization order
    Node h = head;
    Node s;
    return h != t &&
        ((s = h.next) == null || s.thread != Thread.currentThread());
}

3、公共的unlock方法，具体的释放过程由父类AQS定义，具体实现是sync内部类

  /**
   * Attempts to release this lock.
   *
   * <p>If the current thread is the holder of this lock then the hold
   * count is decremented.  If the hold count is now zero then the lock
   * is released.  If the current thread is not the holder of this
   * lock then {@link IllegalMonitorStateException} is thrown.
   *
   * @throws IllegalMonitorStateException if the current thread does not
   *         hold this lock
   */
   //调用内部类sync的release方法，由于sync继承了AbstractQueueSychronizer类，release由父类实现
  public void unlock() {
      sync.release(1);
  }


  /**
   * Releases in exclusive mode.  Implemented by unblocking one or
   * more threads if {@link #tryRelease} returns true.
   * This method can be used to implement method {@link Lock#unlock}.
   *
   * @param arg the release argument.  This value is conveyed to
   *        {@link #tryRelease} but is otherwise uninterpreted and
   *        can represent anything you like.
   * @return the value returned from {@link #tryRelease}
   */
  public final boolean release(int arg) {
      //尝试释放锁
      if (tryRelease(arg)) {
          //释放锁成功，将head节点赋值给h
          Node h = head;
          //如果head节点不为空且等待状态不等0
          if (h != null && h.waitStatus != 0)
              //唤醒后续节点
              unparkSuccessor(h);
          return true;
      }
      return false;
  }

  //父类方法，子类实现
  protected final boolean tryRelease(int releases) {
          // 释放后c的状态值
          int c = getState() - releases;
          //如果持有锁的线程不是当前线程，则抛出异常
          if (Thread.currentThread() != getExclusiveOwnerThread())
              throw new IllegalMonitorStateException();
          boolean free = false;
          if (c == 0) {
              //如果c等于0，代表释放锁成功
              free = true;
              //将锁的拥有者置为空
              setExclusiveOwnerThread(null);
          }
          //设置锁的状态
          setState(c);
          return free;
      }

  /**
   * Wakes up node's successor, if one exists.
   *
   * @param node the node
   */
  private void unparkSuccessor(Node node) {
      /*
       * If status is negative (i.e., possibly needing signal) try
       * to clear in anticipation of signalling.  It is OK if this
       * fails or if status is changed by waiting thread.
       */
      //获取节点等待状态
      int ws = node.waitStatus;
      if (ws < 0)
          compareAndSetWaitStatus(node, ws, 0);

      /*
       * Thread to unpark is held in successor, which is normally
       * just the next node.  But if cancelled or apparently null,
       * traverse backwards from tail to find the actual
       * non-cancelled successor.
       */
      //获取释放锁节点的下一个节点
      Node s = node.next;
      //如果节点等于null说明没有等待线程，或者节点的等待状态 > 0（目前大于0就是取消状态）
      if (s == null || s.waitStatus > 0) {
          //将节点设置为空
          s = null;
          //从tail节点开始遍历，找到不为空且的最近节点
          for (Node t = tail; t != null && t != node; t = t.prev)
              //如果节点的状态 <= 0(即非取消状态)
              if (t.waitStatus <= 0)
                  s = t;
      }
      if (s != null)
          //将节点唤醒
          LockSupport.unpark(s.thread);
  }